// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  userCredentials UserCredentials[]
  accounts      Account[]
  sessions      Session[]
  chatbots      Chatbots[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 

model UserCredentials {
  id                 String   @id @default(cuid())
  userId             String   @unique
  tokens             BigInt   @default(0)
  user               User     @relation(fields: [userId], references: [id])
  companyName        String?
  companyDescription String?
  companyUrl         String?
  companyLogo        String?
  apiKey             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}


model Chatbots {
  id              String            @id @default(uuid())
  title           String
  useCase         String
  userId          String
  collectionId    String
  pathways        String?
  globalPrompt    String?           @db.Text
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  chatbotContent  ChatbotContent[]
  chatbotMessages ChatbotMessages[]
}



model ChatbotContent {
  id        String   @id @default(uuid())
  content   String   @db.LongText
  chatbotId String
  chatbots  Chatbots @relation(fields: [chatbotId], references: [id])
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ChatbotMessages {
  id          String   @id @default(uuid())
  messages    String   @db.LongText
  chatbotId   String
  chatbots    Chatbots @relation(fields: [chatbotId], references: [id])
  sessionId   String
  ipAddress   String
  userAgent   String
  editorState String?  @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}




